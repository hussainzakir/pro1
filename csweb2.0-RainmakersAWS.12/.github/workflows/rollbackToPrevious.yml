name: Rollback to Previous Deployment
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback to previous'
        required: true
        type: environment
permissions:
  id-token: write
  contents: read

jobs:
  rollback:
    name: Rolling back env ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify Actor
        uses: RepublicServicesRepository/gha-verify-actor@v2.2.0
        with:
          github_token: ${{ secrets.REPUBLIC_SYSTEM_PAT }}
          teamlist: ${{ vars.ECS_DEPLOY_AUTHORIZED_TEAMS }}
          whitelist: ${{vars.ECS_DEPLOY_WHITELIST}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{vars.AWS_OIDC_ROLE}}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 1600
          role-session-name: GitHubActions

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get the second to last task definition revision
        id: get_previous_task_definition
        run: |
          TASK_DEFINITION=$(aws ecs list-task-definitions --family-prefix ${{vars.ID_PREFIX}}-task-def --sort DESC --query 'taskDefinitionArns[1]' --output text)
          echo "$TASK_DEFINITION"
          echo "task_definition=${TASK_DEFINITION}" >> $GITHUB_OUTPUT

      - name: Rollback to previous task definition
        run: |
          aws ecs update-service \
            --cluster ${{vars.ID_PREFIX}}-ecs-cluster \
            --service ${{vars.ID_PREFIX}}-ecs-service \
            --task-definition ${{ steps.get_previous_task_definition.outputs.task_definition }} \
            --force-new-deployment
